trigger_lights_out:
  alias: Trigger Lights Out
  sequence:
  - service: light.turn_off
    data:
      entity_id: group.all_lights
  - service: logbook.log
    data_template:
      name: Lights Out
      message: was triggered
      entity_id: script.trigger_ligths_out
trigger_good_night:
  alias: Trigger Good Night
  sequence:
  - alias: Trigger Lights Out Script
    service: script.turn_on
    entity_id: script.trigger_lights_out
  - alias: Lock Front Door
    service: lock.lock
    data:
      entity_id: lock.front_door_lock_locked
  - service: logbook.log
    data_template:
      name: Good Night
      message: triggered
      entity_id: scritp.trigger_good_night
wake_up:
  alias: Wake Up Script
  sequence:
  - service: logbook.log
    data_template:
      name: Chris
      message: is waking up
      entity_id: device_tracker.chris_galactiphone
  - service: climate.set_temperature
    data_template:
      entity_id: climate.lyric_thermostat
      temperature: '{{ states(''sensor.wake_up_temperature'') | int }}'
  - service: light.turn_on
    data:
      entity_id: light.livingroom_light
  - service: notify.html5_notifier_galactiphone
    data_template:
      title: '{{now().strftime("%Y-%m-%d %H:%M:%S")}}'
      message: Good morning Chris!
  - delay:
      minutes: 1
  - service: light.turn_on
    data:
      entity_id: light.bathroom_light
  - delay:
      minutes: 5
  - service: light.turn_on
    data:
      entity_id: light.office_light

# Light Toggles
office_light_toggle:
  alias: Office Light
  sequence:
  - service: ifttt.trigger
    data:
      event: office_light_toggle
bathroom_light_toggle:
  alias: Bathroom Light
  sequence:
  - service: ifttt.trigger
    data:
      event: bathroom_light_toggle
bedroom_light_toggle:
  alias: Bedroom Light
  sequence:
  - service: ifttt.trigger
    data:
      event: bedroom_light_toggle
living_light_toggle:
  alias: Living Room Light
  sequence:
  - service: ifttt.trigger
    data:
      event: living_light_toggle
hall_light_toggle:
  alias: Front Hall Light
  sequence:
  - service: ifttt.trigger
    data:
      event: front_hall_light_toggle
vanity_light_toggle:
  alias: Vanity Light
  sequence:
  - service: ifttt.trigger
    data:
      event: vanity_light_toggle

# Pause Roku Script
pause_roku:
  alias: Pause Roku
  sequence:
  - data:
      entity_id: media_player.galactiku
    service: media_player.media_play_pause

# Announce Package Deliveries
package_delivered_announcement:
  alias: Package Delivered
  sequence:
  - data:
      message: A Package has been delivered
    entity_id: media_player.all_speakers
    service: tts.google_say
  - data:
      entity_id: input_boolean.package_delivered_trigger
    service: input_boolean.turn_off
  - data:
      title: '{{now().strftime("%Y-%m-%d %H:%M:%S")}}'
      message: 'A package has been delivered'
    service: notify.all_phones_message_only
  - service: logbook.log
    data_template:
      name: A Package
      entity_id: script.package_delivered_announcement
      message: has been delivered
      
# Announce what is for dinner
whats_for_dinner_announcement:
  alias: What is for dinner
  sequence:
    - service: tts.google_say
      entity_id: media_player.all_speakers
      data_template:
        message: >-
          {%- if (states('sensor.next_meal_diff_seconds')| int < 86400) and (states('sensor.next_meal_diff_seconds')| int > 0) -%}
            {%- set strFood = states.calendar.pte_meal_plan_recipes.attributes.message.split(': ') -%}
            {%- set strFoodOnly = strFood[1] -%}
            {{strFoodOnly}}         
          {%- else -%}
            "There is no meal on the plan"
          {%- endif -%}

# Lock the front door
lock_front_door:
  alias: Lock Front Door
  sequence:
  - alias: Lock Front Door
    data:
      entity_id: lock.front_door_lock_locked
    service: lock.lock
    
# Unlock the front door
unlock_front_door:
  alias: Unlock Front Door
  sequence:
  - data:
      entity_id: lock.front_door_lock_locked
    service: lock.unlock
    
# Camera Scripts
living_room_camera_view:
  alias: Living Room Camera View
  sequence:
    - service_template: >-
            {% if is_state("input_select.living_room_cam_view", "Living Room") %}
              shell_command.living_room_cam_goto_normal
            {%-elif is_state("input_select.living_room_cam_view", "Front Door") %}
              shell_command.living_room_cam_goto_front_door
            {% else %}
              
            {% endif %}
lr_cam_start_scan:
  alias: Start Scan
  sequence:
  - service: shell_command.living_room_cam_scan_start
  - delay:
      minutes: 15
  - service: input_boolean.turn_off
    data:
      entity_id: input_boolean.lr_cam_scan
lr_cam_stop_scan:
  alias: Stop Scan
  sequence:
  - service: shell_command.living_room_cam_scan_stop
  - service: input_boolean.turn_off
    data:
      entity_id: input_boolean.lr_cam_scan
kitchen_camera_view:
  alias: Kitchen Camera View
  sequence:
    - service_template: >-
            {% if is_state("input_select.kitchen_cam_view", "Cat Food") %}
              shell_command.kitchen_cam_goto_cat_food
            {%-elif is_state("input_select.kitchen_cam_view", "Garage Door") %}
              shell_command.kitchen_cam_goto_kitchen
            {%-elif is_state("input_select.kitchen_cam_view", "Living Room") %}
              shell_command.kitchen_cam_goto_living_room
            {%-elif is_state("input_select.kitchen_cam_view", "Bedroom Door") %}
              shell_command.kitchen_cam_goto_bedroom_door
            {% else %}
              
            {% endif %}
kitch_cam_start_scan:
  alias: Start Scan
  sequence:
  - service: shell_command.kitchen_cam_scan_start
  - delay:
      minutes: 15
  - service: input_boolean.turn_off
    data:
      entity_id: input_boolean.kitch_cam_scan
kitch_cam_stop_scan:
  alias: Stop Scan
  sequence:
  - service: shell_command.kitchen_cam_scan_stop
  - service: input_boolean.turn_off
    data:
      entity_id: input_boolean.kitch_cam_scan
      
# Test Script
test_script:
  sequence:
    - service: notify.html5_notifier_galactiphone
      data:
        title: '{{now().strftime("%Y-%m-%d %H:%M:%S")}}'
        message: Test Successful!
      